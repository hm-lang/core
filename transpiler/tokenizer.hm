uh: oneOf[
    did_not_finish_midline_comment: str
    ambiguous_operator: str
]
hm[of]: hm[ok: of, uh]

tokenizer: {
    @private {
        Lines[str]          # lines to parse
        Line_index; index   # current index into `Lines`
        Char_index; index   # current index into `Lines[Line_index]`
        Hm[token];          # current result
    }

    ;;reset(Array[str].): null
        My Lines = Array!
        # Do a little work here so we don't need to keep track of
        # whether we've initialized `My Token` for the first `peek`.
        My Token = My next()

    ::line_index(): My Line_index

    ::peek(fn(Hm[token]): ~t): t
        fn(My Hm)

    ;;take(): token
        Result; My next()
        Result <-> My Hm
        Result or_panic()

    @private
    ;;next(): hm[token]
        if My Line_index >= My Lines count()
            return token End_of_file
        while True
            Char: My advance_char()
            match Char
                0
                    ++My Line_index
                    My Char_index = 0
                    return token New_line
                ' ', '\t'
                    continue
                '"'
                    return I consume_string()
                '\''
                    return I consume_rune()
                '+', '-',
                    return I consume_plus_minus_operator(Starting_char: Char)
                    return I consume_plus_minus_operator(Starting_char: Char)
                '*', '/',
                    return I consume_binary_operator(Starting_char: Char)
                # TODO

    ;;advance_char(): u8
        My Lines[My Line_index][My Char_index++, Default: 0]

    # if `+` will return that.
    # if `++` will return that.
    # if `+++` will return an error since we don't know if it's `+ ++` or `++ +`;
    # we could analyze tokens before/after to determine if it should be prefix/postfix
    # but we'll prefer users to make it clear in the code.
    @private
    ;;consume_plus_minus_operator(Starting_char: u8): hm[token]
        assert(My Line_index < My Lines count())

        Next_char: My Lines[My Line_index][My Char_index + 1, Default: 0]

        if Next_char != Starting_char
            # just `+` or `-`:
            return operator(Starting_char)

        assert(I advance_char() == Next_char)
        Next_next_char: My Lines[My Line_index][My Char_index + 1, Default: 0]
        if Next_char != Next_next_char
            # `++` or `--`:
            return operator(Starting_char | (Starting_char << 8))
        
        # +++ or ---.  this is ambiguous...
        return ambiguous_operator(I format_error("ambiguous operator, use `++ +` or `- --`"))

    ::format_error(Str): str
        Prefix; "#@!$"
        if My Char_index >= Prefix count()
            Prefix[My Char_index] = '^'
        "$(Prefix) $(Str)" 
}

token: one_of[
    End_of_file: 0

    # TODO: a `one_of` already has some space for a tag.
    #       we could use one tag number for `small_str` and another for `str`
    #       both could point to the correct token but a different data format.
    #       the `token` tag itself will probably fit into 1 byte so we could have up to
    #       7 + 8 = 15 bytes (on a 64-bit platform) for a short string.
    end_of_line_comment: str        # e.g., `# nothing gets passed you`
    mid_line_comment: str           # e.g., `#( whatever )#`
    multiline_comment: array[str]   # e.g., `#(# ... #)#` with newlines

    compiler_comment: str    # e.g., `#salt(123)`
    compiler_error: str      # e.g., `#@!$...`

    lower_camel_case: str
    upper_camel_case: str

    indent: i64     # number of spaces, always absolute: not relative from last indent
    declaration: one_of[Readonly: 1, Writable, Fleeting] {
        @alias Temporary: Fleeting
        @Null: 0
    }

    Comma
    New_line

    operator: n64   # e.g., `and`, `<=`, or `+` squished into 8 bytes,
                    # with higher bytes zeroed.

    rune: i32   # something in single quotes, e.g., 'รถ' or '5'
    string: str # something in double quotes
    # TODO: add Interpolated_string

    aside: array[token]     # e.g., `(...)`
    brace: array[token]     # e.g., `{...}`
    bracket: array[token]   # e.g., `[...]`

    lambda_aside: array[token]   # e.g., `$(...)`
    lambda_brace: array[token]   # e.g., `${...}`
    lambda_bracket: array[token] # e.g., `$[...]`
] {
    @alias multi_line_comment: multiline_comment
    @alias midline_comment: mid_line_comment
}

n64: u64 {
    @Null: 0
}
