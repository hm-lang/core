
uh := oneOf(
    InvalidArgument
    # TODO...
)
hm~ok := hm{ok, uh}

window := {
    # Returns true iff the window is fullscreen.
    ::fullscreen(): bool
    # Sets fullscreen if the passed-in `Bool` is true,
    # otherwise sets windowed mode; swaps the previous value into `Bool` (if `;`).
    ;;fullscreen(Bool;.): null

    # Returns the actual window size, i.e., the real-estate available for drawing.
    ::size(): size2i
    # Sets the window size, returning the old value if the attempt was successful.
    ;;size(Size2i): hm size2i
    # TODO: add these eventually when we think we have a consistent API:
    #[#
    # Sets the minimum window size, i.e., for a resizable window.
    ;;minSize(Size2i): hm size2i
    # Sets the maximum window size, i.e., for a resizable window.
    ;;maxSize(Size2i): hm size2i
    #]#

    # Returns the current data in the clipboard,
    # i.e., for the "pasting" part of copy-paste.
    ::clipboard(): string
    # Sets the current data in the clipboard,
    # i.e., for the "copying" part of copy-paste.
    # returns what was in the clipboard.
    ;;clipboard(String): string

    ::resolution() := My Pixels size()
    ;;resolution(Size2i) := My Pixels size(Size2i)

    # Function to get pixels to draw to.
    ;;draw(fn(~QpuPixels;): t) := fn(My Pixels;)

    # Grabs window events to handle.
    ;;pull(): windowEvent[]
        My AccumulatingEvents[(WindowAccumulatingEvents;) := WindowAccumulatingEvents pull()]

    @private {
        Pixels;
        Background; color
        # TODO: better word for mutex, maybe `locked`?
        AccumulatingEvents; guarded windowAccumulatingEvents
    }
}

@private windowAccumulatingEvents {
    # TODO: could add `Text`, etc., to accumulate events
    @private Events[]; windowEvent

    # TODO: probably want to pass in a winit (or whatever framework) event here.
    append(WindowEvent): null
        if WindowEvent is((KeyboardEvent):
            My Modifiers checkDelta(
                KeyboardEvent Key
                KeyboardEvent Pressed
            )
        )
        My Events append(WindowEvent)
        # TODO: could update Text and put it all into one.
    
    pull(): windowEvent[]
        Results[]; windowEvent
        Results <-> My Events
        Results 

    Modifiers; {
        Control: i32
        Shift: i32
        Meta: i32
        Alt: i32

        ;;checkDelta(Key, State: windowEvent keyEvent state): null
            if State isRepeated()
                return
            what Key
                Control
                    My Control += if State isPressed() $(1) else $(-1)
                Shift
                    My Shift += if State isPressed() $(1) else $(-1)
                Meta
                    My Meta += if State isPressed() $(1) else $(-1)
                Alt
                    My Alt += if State isPressed() $(1) else $(-1)
    }
}

windowEvent := oneOf(
    # A resize event, with the new internal window size.
    ResizeEvent: size2i
    # A sequence of runes (e.g., layout and locale included).
    TextEvent: string
    # A physical, named key.
    KeyEvent: {Key, Modifiers, State: oneOf(Pressed, Released, Repeated)}
    # Mouse button, e.g., left mouse button or right mouse button.
    MouseButtonEvent: {Position: vector2i, Button: u8, Modifiers, State: oneOf(Pressed, Released)}
    # The mouse moving.  The position is relative to the top-left of the shown pixels
    # (i.e., in case of letterboxing, coordinates can be < 0 or >= the Window Resolution).
    MouseMoveEvent: {Delta: vector2i, Position: vector2i, Modifiers}
    # The mouse is scrolling.
    MouseWheelEvent: {Delta: i32, Modifiers}
)

modifiers := {
    Control: bool
    Shift: bool
    Meta: bool
    Alt: bool
}

@referenceableAs(cpuPixels, gpuPixels)
pixels := {
    @hideFrom(cpuPixels, gpuPixels)
    ;;renew(FilePath) := I load(FilePath)

    # Saves the image.
    ::save(FilePath): null

    # Loads an image from a file.
    @hideFrom(cpuPixels, gpuPixels)
    ;;load(FilePath): null

    # Current size of the image.
    ::size(): size2i

    # Tries to resize the image.  Can fail if the new size is too large (OOM)
    # or if the size is invalid (e.g., negative values).
    @hideFrom(cpuPixels, gpuPixels)
    ;;size(New->Size2i): hm{ok: size2i, uh}

    # Color getter via coordinates.  Can fail if the coordinates are out of bounds (OOB).
    # Can also be expensive if the pixels aren't up-to-date on the CPU.
    @hideFrom(gpuPixels)
    ::[Coordinates2i, fn(Color): ~t]: hm{ok: t, uh}

    # Color check+setter via coordinates.
    @hideFrom(gpuPixels)
    ;;[Coordinates2i, fn(Color;): ~t]: hm{ok: t, uh}

    # Color setter (doesn't check the color first).
    ;;draw(Coordinates2i, Color): hm{uh}

    # Draws some text to these pixels.
    @hideFrom(cpuPixels) # TODO: maybe support CPU font drawing eventually
    ;;draw(String, Caret;, Font;, FontOptions := fontOptions()): null

    # TODO: `;;draw(..., Mask)` for scissor operations

    # Draws a rectangle of a solid color.
    # If the rectangle is outside of the pixels coordinates, does nothing;
    # only the overlap of the pixels' rectangle with `Rectangle2i` will matter.
    ;;draw(Rectangle2i, Color): null

    # Draws a rectangle of a solid color.
    # If any of the rectangle's area is outside the `Wrap` rectangle,
    # the rectangle will be split into pieces and wrapped before drawing.
    ;;draw(Rectangle2i, Color, Wrap: rectangle2i): null

    # Draws some fragments (triangles) to these pixels, setting the GPU version
    # of these pixels ahead of the CPU version (if present).
    # WARNING: Will also send `Vertices` to the GPU if not already there.
    @hideFrom(cpuPixels)
    ;;draw(Shading~{vertexData, fragmentData};, Vertices[]; vertexData, Fragments[]: fragment): null

    # TODO: line-drawing API.  e.g., `;;draw(Line, Color): null`
    #       probably want a pixel-perfect one, plus a thickness based one.

    # Moves the data to the GPU, if it's not already there and up-to-date.
    # This can be expensive as we upload the entire image from CPU to GPU, if it has changed.
    @hideFrom(cpuPixels, gpuPixels)
    ;;push(): null

    # Moves the data from the GPU to the CPU, if the CPU is behind the GPU.
    # This can be expensive as we download the entire image from GPU to CPU, if it has changed.
    @hideFrom(cpuPixels, gpuPixels)
    ;;pull(): null

    @private {
        State ;= state pixelsId CpuOnly

        # The current image size.
        Size; size2i

        # Row-major order, with rows being rows of pixels across the screen left->right,
        # with `Pixels[0]` being the top row and `Pixels[Height - 1]` the bottom row.
        # Invariant: if `State != GpuOnly`,
        # `Pixels[Y] size() == My Size Width` for all `Y` in bounds
        # and `Pixels size() == My Size Height`.
        Pixels[][]; color
    }
}

# Copies from one set of pixels to another.
# Note that the source pixels `From` must be modifiable in case they
# need to be moved from/to the GPU, based on `To` being CPU/GPU pixels.
draw(From; pixels, To; pixels, FromRectangle: rectangle2i, ToRectangle: rectangle2i): null

# Copies from one set of pixels to another, with wrapping.
# E.g., if `FromRectangle` is outside `FromWrap`, then the remainder will get wrapped around,
# so that we copy from the other side.
draw(
    From; pixels
    To; pixels
    FromRectangle: rectangle2i
    ToRectangle: rectangle2i
    FromWrap: rectangle2i
    ToWrap: rectangle2i
): null


vertices~data := {
    vertex := union({Position: vector3f}, data)

    ;;renew(FilePath) := I load(FilePath)

    # Saves the vertices to a file.
    ::save(FilePath): null

    # Loads vertices from a file.
    ;;load(FilePath): null

    ;;[fn(Array[]; data): ~t]: hm{ok: t, uh}
        assert !My State gpuIsAheadOfCpu()

        Result := fn(My Vertices;)

        My State is((Synced):
            My State = needsCommit(PreviousId: Synced Id)
        )

        ok(Result)

    # Moves the data to the GPU, if it's not already there and up-to-date.
    # This can be expensive as we upload all the vertices from CPU to GPU, if they have changed.
    ;;push(): null

    # NOTE: there is no `;;pull()` method like with `pixels`; we don't modify
    # vertices on the GPU like we do with textures.

    # TODO: `..transfer(): vertices data` to become `GpuOnly`

    @private {
        State ;= state verticesId CpuOnly

        Vertices[]; vertex
    }
}

@private state~t := oneOf(
    # This object is not represented on the GPU at all.
    CpuOnly
    # This object is not represented on the CPU at all.
    GpuOnly: {Id}
    # The CPU version of this object is ahead of the GPU version.
    # The CPU version should send an update to the GPU (may be expensive).
    NeedsGpuUpdate: {PreviousId: t}
    # The GPU version of this object is ahead of the CPU version.
    # The CPU version should request the data from the GPU (may be expensive).
    NeedsCpuUpdate: {Id: t}
    # The GPU version of this object is in sync with the CPU version.
    Synced: {Id: t}

    ::gpuIsAheadOfCpu(): bool
        what Me
            CpuOnly: $(False)
            GpuOnly: $(True)
            NeedsGpuUpdate: $(False)
            NeedsCpuUpdate: $(True)
            Synced: $(False)
)

fragment := {
    VertexIndices[3]; u32
}

# Warning!  Ensure that any fields to `vertexData` or `fragmentData`
# don't use a `builtin` like `VertexIndex`, unless you actually want to use that built-in.
shader~{globalData?: gpuData, vertexData?: gpuData, fragmentData?: gpuData} := {
    vertexInputData := union({Position: vector3f}, vertexData)
    vertexOutputData := union({Position: vector4f}, fragmentData)

    ;;renew(
        # Vertex shader, which returns the position of the vertex
        # plus any fragment data (for the fragment shader).
        # TODO: needs to be a pure function.
        # TODO: needs to have super-reflection so that we can parse this into shader language.
        @private My shade(GlobalData, VertexInputData): vertexOutputData

        # Fragment shader, which returns the color to use for this pixel,
        # based on GlobalData and FragmentData from the fragment's vertices.
        # If returning null, the result is equivalent to a `discard`,
        # and can be used for 100% transparency.
        @private My shade(GlobalData, VertexOutputData)?: color4f
    ): null

    # Actually use this shader to draw to some GPU pixels.
    # E.g.,
    #   Shader shade({
    #       My: 12.3
    #       Global: vector2f(X: 5.0)
    #       Data: matrix4f(Translation: vector3f(X: 4.0, Y: 1.0, Z: 7.5))
    #   }, draw(Shading;):
    #       Pixels draw(Shading;, MyVertices, MyTriangles)
    #   )
    ::shade(GlobalData, Draw->fn(Shading): null): null
}

gpuData := fieldsOf(u32, f32, vector2f, vector3f, vector4f, matrix3f, matrix4f)

font := {
    ;;renew(
        # TODO: switch to Vertices
        # textures that hold all the drawn runes (glyphs)
        @private My Glyphs[fontStyle]: pixels
        # vector for each rune in the pixels.
        @private My Coordinates[rune]: vector2i
        # size of each glyph in the texture.
        @private My GlyphSize: size2i
    ) := null
}

# Where the next bit of text will be added.
caret := {
    Top; vector2i
    Height; i32
}

fontOptions := {
    Foreground; color
    # TODO: remove?
    Background; color
    Style; fontStyle
}

fontStyle := anyOrNoneOf(
    Bold
    Italic
    Underlined
    Inverted # foreground/background color is inverted
    Chaos # add pseudorandom jitter to drawn runes
)

vector2~t := {X; t, Y; t}
vector2i := vector2 i32
vector2f := vector2 f32

size2~t := {Width; t, Height; t}
size2i := size2 i32
size2f := size2 f32

index2~t := {Column; t, Row; t}
index2i := index2 i32
index2f := index2 f32
