# A class that handles low-level contiguous memory access.
# You must handle initializing/constructing and destructing elements in this class;
# which elements are initialized *must be known* by the class instance which
# uses the allocation.  E.g., a stack is initialized in the range [0, `Stack size()`).
@final
allocation~t := {
    @protected
    Count; count = 0

    this uh := oneOf(
        InvalidCount
        InvalidIndex
        OutOfMemory
    )

    this hm~u := hm~(ok: u, this uh)

    ::count() := This Count

    # returns the old count if successful.
    # make sure to construct any new elements that are available to callers
    # after calling this method.
    ;;count(New->Count): hm~count
        assert(New->Count >= 0, Uh: InvalidCount)
        Old->Count := This Count
        if New->Count == Old->Count
            return ok(Old->Count)
        Bytes := countBytes(New->Count)
        @cc(
            @hm(t) *New_Memory = (@hm(t) *)realloc(Memory, @hm(Bytes));
            if (New_Memory == Null) {
                return @hm(this uh OutOfMemory);
            }
            Memory = New_Memory;
        )
        This Count = New->Count
        ok(Old->Count)

    this new(Count): hm~allocation~u
        # it's always possible to default construct this allocation.
        New ;= hm~allocation~u()
        what New count(Count)
            Ok:
                ok(New)
            Uh:
                # TODO: do we need this `uh()` wrapper?
                uh(Uh)

    @cc(
    private:
        @hm(t) *Memory = Null;

    public:
        // Default construction allowed
        @hm(allocation() {}

        void reset() {
            free(Memory);
            Memory = Null;
            @hm(Count) = 0;
        }

        ~@hm(allocation) {
            reset();
        }

        // TODO: if we are serious about no pointers, then we should
        // be able to support copy constructors here.
        // no copy constructor:
        @hm(allocation)(const @hm(allocation) &Allocation) = delete;

        // no copy assignment:
        @hm(allocation) &operator = (const @hm(allocation) &Allocation) = delete;

        // move constructor:
        @hm(allocation)(@hm(allocation) &&Allocation) {
            take(std::move(Allocation));
        }

        // move assignment:
        @hm(allocation) &operator = (@hm(allocation) &&Allocation) {
            if (&Allocation != this) {
                take(std::move(Allocation));
            }
            return *this;
        }

    private:
        inline void take(@hm(allocation) &&Allocation) {
            reset();
            std::swap(@hm(Count), Allocation.@hm(Count));
            std::swap(Memory, Allocation.Memory);
        }
    )

    ::[InBoundsAndConstructed: inBounds]: t
        # Only call this if you've already constructed a value here.
        # We can't verify if the index has been constructed without more bookkeeping,
        # but in debug mode we can verify that we're at least in bounds.
        debug assert(InBoundsAndConstructed >= 0 and InBoundsAndConstructed < This count())
        @cc(
            return Memory[@hm(InBoundsAndConstructed)];
        )

    ;:[InBoundsAndConstructed: inBounds, fn(T;:): ~u]: u
        debug assert(InBoundsAndConstructed >= 0 and InBoundsAndConstructed < This count())
        @cc(
            return @hm(fn)(&Memory[@hm(InBoundsAndConstructed)]);
        )

    ;;defaultConstruct(InBounds): null
        debug assert(InBounds >= 0 and InBounds < Count)
        @cc(
            new (Memory + @hm(InBounds)) @hm(t)();
        )
        # pure C? `hm(t)_default(Memory + @hm(InBounds))`

    ;;moveConstruct(InBounds, T.): null
        debug assert(InBounds >= 0 and InBounds < Count)
        @cc(
            new (Memory + @hm(InBounds)) @hm(t)(std::move(@hm(T)));
        )
        # pure C? `hm(t)_moot(Memory + @hm(InBounds), @hm(T))`

    ;;copyConstruct(InBounds, T): null
        debug assert(InBounds >= 0 and InBounds < Count)
        @cc(
            new (Memory + @hm(InBounds)) @hm(t)(@hm(T));
        )
        # pure C? `hm(t)_copy(Memory + @hm(InBounds))`

    ;;deconstruct(InBoundsAndConstructed): null
        debug assert(InBoundsAndConstructed >= 0 and InBoundsAndConstructed < Count)
        @cc(
            (Memory + @hm(InBoundsAndConstructed))->~@hm(t)();
        )
        # pure C? `hm(t)_descope(Memory + @hm(InBounds))`

    @private
    ::countBytes(Count): @cc(size_t)
        if Count == 0
            return 0
        if Count < 0
            throw error("invalid count: $(Count)");
        MaxBytes: @cc(size_t) = -1
        TBytes: @cc(size_t) = @cc(sizeof(@hm(t)))
        if Count > MaxBytes // TBytes
            throw error("cannot allocate $(Count) elements of size $(TBytes) each");        
        return Count * TBytes
}
