mutable := oneOf(
    # immutable type
    No
    # mutable type
    Yes
)

# this is the underlying type that is used for all arguments in hm-lang
# when they are passed by reference.
# TODO: should types be specified in an object (e.g., reference~{t, Mutable})?
reference~(t, Mutable) := oneOf(
    # a literal C pointer.  if Mutable == Yes, `t *`, else `const t *`.
    ptr~(t, Mutable)

    # an element of another container.  note this is defined recursively
    # in terms of `reference` so that nested containers work out to be
    # a chain of references by key.  e.g., `Map["hello"][5];` becomes 
    # `{Container: {Container: ptr~(mutable Yes)(Map), Key: "hello"}, Key: 5}`
    element~key: {
        # TODO: `key` type is potentially an unknown size;
        #       are we able to build this struct without a heap allocation?
        Key: key
        Container: reference~(container~(key, value: t), Mutable)
    }
)

# No-copy getter/modifier for the value inside the reference.
# Example usage.
#   X ;= 12345
#   Reference := ptr~(mutable Yes)(X)
#   Y ;= 678
#   Reference[fn(Int;): null
#       Int <=> Y
#   ]
#   print(Y) # should be 12345
#   print(X) # should be 678
# TODO: figure out a good way to choose other options for the
#       `:;` template, e.g., `mutable {No, Yes}`.
[Reference: reference~(t, mutable {Yes, No}), fn(T;:): ~u]: u
    what Reference
        # TODO: discuss dereferencing notation `*Ptr` or `Ptr[]`:
        (Ptr) := fn(Ptr[];:)
        (Element;:) := what Element Container
            (Parent->Ptr) := Ptr[];:[Element Key, fn]
            # if the parent was itself the element of a container,
            # we need to nest the `fn` inside a function we pass
            # into that container.
            (Parent->Element;:) := Parent->Element Container[
                Parent->Element Key
                # TODO: we've lost this type information for `value` here;
                #       not sure how we'd recover it if we needed it.
                parentFn(Parent->Value;:) := Parent->Value[Element Key, fn]
            ]

# e.g., take for example:
#   Reference := reference(MyArray[77]["hello"][5];)
# which is represented as element(
#       Key: 5
#       Container: element(
#           Key: "hello"
#           Container: element(
#               Key: 77
#               Container: ptr(MyArray)
#           )
#       )
#   )
# and we want to do this to the final element:
#   Reference[superCool(T;) := T += 3]
# which should effectively call this:
#   MyArray[77, fn(Map;) := Map["hello", fn(Array;) := Array[5, superCool]]]
# this occurs because we hit the `parentFn` inside the dereference method above
#   ArrayContainer[5, superCool] 
# which will call this on the parent container.
#   MapContainer["hello", fn(Array) := Array[5, superCool]]
# now this becomes recursive, since MapContainer is still a container reference,
# but we'll exit at the `Parent->Ptr` block/function here
#   ptr(MyArray)[];:[77, $Map["hello", $Array[5, superCool]]]

# TODO: can we write this "forwards" instead of backwards?
#       e.g., `reference~t := oneOf(ptr~t, element: {ptr~chain~t, Key[]: keyChain})`
