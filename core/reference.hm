mutable := oneOf(
    # immutable type
    No
    # mutable type
    Yes
)

# this is the underlying type that is used for all arguments in hm-lang
# when they are passed by reference.
# TODO: should types be specified in an object (e.g., reference~{t, Mutable})?
reference~(t, Mutable) := oneOf(
    # a literal C pointer.  if Mutable == Yes, `t *`, else `const t *`.
    ptr~(t, Mutable)

    # an element of another container.  note this is defined recursively
    # in terms of `reference` so that nested containers work out to be
    # a chain of references by key.  e.g., `Map["hello"][5];` becomes 
    # `{Container: {Container: ptr~(mutable Yes)(Map), Key: "hello"}, Key: 5}`
    element~key: {
        Key: key
        Container: reference~(container~(key, value: t), Mutable)
    }
)

# Updates a reference to the passed-in value, updating the
# passed-in external variable with the old value.
# Example usage.
#   X ;= 12345
#   Reference := ptr~(mutable Yes)(X)
#   Y ;= 678
#   swap(Reference, Y;)
#   print(Y) # should be 12345
#   print(X) # should be 678
# TODO: figure out a good way to choose other options for the
#       `:;` template, e.g., `mutable {No, Yes}`.
[Reference: reference~(t, mutable {Yes, No}), fn(T;:): ~u]: u
    what Reference
        # TODO: Rust-like here?
        (Ptr) := fn(Ptr)
        (Element) := Element Container[Element Key, fn]

# TODO: it feels like we should be wrapping `fn` when passing into a container.
#       the above doesn't seem quite right.  e.g.,
#       Reference := reference(Map["hello"][5];)
#       Reference[superCool(T;) := T += 3] # should effectively call this:
#       Map["hello", fn(Array;) := Array[5, superCool]]
# but it seems to call something like this:
#       Element0.Container[5, superCool]        # Element0 = `Map["hello"]` reference
#       Element1.Container["hello", superCool]  # Element1 = `Map` reference
