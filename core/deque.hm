deque~t := extend(indexable~t) {
    @private
    StartIndex; index
    @private
    Array; t_
    
    ;;reset(@private This Size; index):
        assert Size >= 0
        Array size(Size)
        StartIndex = 0

    ;;size(): index = Size

    ;;_(Index;)!: t
        return Array[internalIndex(@@Index)]!

    ;;append(T; t): null
        AppendIndex ;= internalIndex(Size)
        if AppendIndex == StartIndex
            # we've looped around, reallocate
            reallocate(Adding: 1)
            AppendIndex = Size
        Array[AppendIndex] = T!
        ++Size

    ;;reallocate(Adding: index): null
        New->Array ;= array~t(Size: newAllocation(Adding))
        for Index: index < Size
            New->Array[Index] = This_Index!
        Array = New->Array!
        StartIndex = 0

    @private
    ::newAllocation(Adding: index): index
        debug->assert Adding > 0
        CurrentSize := size()
        if CurrentSize == 0
            return Adding
        if CurrentSize * 2 >= CurrentSize + Adding
            return CurrentSize * 2
        return CurrentSize + Adding

    ;;internalIndex(Index; index): index
        InternalSize := Array size()
        return if InternalSize > 0
            (StartIndex + Index) %% Array size()
        else
            0
}
