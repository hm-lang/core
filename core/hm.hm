hm[ok, uh]: one_of[ok, uh]
{   # The API is `Ok: Hm assert()`, which will bubble up this `uh`
    # if the result was an error.  Note that we use the `block` API
    # which normally is implicit but can be used explicitly if needed.
    #   ```
    #   do_something(Dbl): hm[ok: dbl, uh: str]
    #       if Dbl < 0
    #           uh("Invalid Dbl: $(Dbl)")
    #       else
    #           ok(Dbl sqrt())
    #
    #   # example with implicit `block` (like a guard/control flow):
    #   implicit_block(): hm[ok: null, uh: str]
    #       # will return early if an invalid type.
    #       Result: do_something(1.234) assert()
    #       print(Result)
    #
    #   # example with explicit `block` that does the same thing as implicit:
    #   explicit_block(): hm[ok: null, uh: str]
    #       indent
    #       (   (Block[hm[ok: null, uh: str]]):
    #               Result: do_something(1.234) assert(Block)
    #               print(Result)
    #               Block exit(null)
    #       )
    #   ```
    ..assert[of: contains[uh]](Block[of]): ok
        what Me
            Ok: $(Ok)
            Uh: $(debug error(Uh), Block exit(Uh))

    # The API is `Ok: Hm assert(Uh: "custom error if not `ok`")`.
    # This will moot `Me` and shortcircuit a failure (i.e., if `Hm`
    # is `uh`) to the calling block.  For example,
    #   ```
    #   do_something(Dbl): hm[ok: dbl, uh: str]
    #       if Dbl < 0
    #           uh("Invalid Dbl: $(Dbl)")
    #       else
    #           ok(Dbl sqrt())
    #
    #   # example with implicit `block` (like a guard/control flow):
    #   implicit_block(): hm[ok: null, uh: one_of[Invalid_do_something, Other_error]]
    #       # will return early if an invalid type.
    #       Result: do_something(1.234) assert(Uh: Invalid_do_something)
    #       print(Result)
    #
    #   # example with explicit `block` that does the same thing as implicit:
    #   explicit_block(): hm[ok: null, uh: one_of[Invalid_do_something, Other_error]]
    #       indent
    #       (   (Block[hm[ok: null, uh: str]]):
    #               Result: do_something(1.234) assert(Block, Uh: Invalid_do_something)
    #               print(Result)
    #               Block exit(null)
    #       )
    #   ```
    ..assert[of](New Uh: of, Block[contains[of]]): ok
        what Me
            Ok: $(Ok)
            Uh:
                debug error(Uh)
                Block exit(New Uh)

    ..or_panic(String: ""): ok
        what Me
            Ok: $(Ok)
            Uh:
                error(Uh)
                # `panic` exits program
                panic(String || Uh)

    # If ok, returns the `Ok` value; otherwise returns the passed-in value.
    # If it is expensive to create the in-case-of-error `ok` value, use 
    # `Hm map((Uh.): my_expensive_ok_construction())` to create it only as necessary.
    ..ok_or(In_case_of_error Ok.): ok
        what Me
            Ok: $(Ok)
            Uh: $(In_case_of_error Ok)

    # maps an `Ok` result to a different type of `ok`, consuming `Me`.
    ..map(fn(Use Ok.): A~ok): hm[A ok, uh]

    # maps an `Ok` result to a different type of `ok`, with possibly an error, consuming `Me`.
    ..map(fn(Use Ok.): hm[A~ok, uh]): hm[A ok, uh]

    # passes through any `Ok` result, but maps an `Uh` to the desired `ok` result
    # via the passed-in function.
    ..map(fn(Use Uh.): ok): ok

    # maps an `Uh` result to a different type of `uh`.
    ..map(fn(Use Uh.): O~uh): hm[ok, O uh]

    # maps `ok` and `uh` separately.
    ..map(fn(Use Ok.): ~t, fn(Uh.): t): t

    # runs a callback if OK but returns self
    ..check(fn(Use Ok): null): me

    # runs a callback if not OK but returns self
    ..check(fn(Use Uh): null): me

    # runs different callbacks based on OK/not-OK but returns self
    ..check(Ok_fn fn(Use Ok): null, Uh_fn fn(Use Uh): null): me

    # TODO: should we use `to` here or is there a better way to indicate casting?
    # it's technically something like `one_of[ok, null](Result: hm[ok, uh]): one_of[ok, null]`
    # which is pretty verbose.  could use `(Me.): one_of[ok, null]` for implicit conversion
    ..to(): one_of[ok, null]
}

