uh: oneOf[
    # TODO: this might be hard to do correctly since each `uh` indexes from 0.
    #       and any values of `indexable uh` need to be increased to come after `allocation`
    #       we could get around some of the downsides here by ensuring we always
    #       compare to real values and not just `X == 0`.
    # TODO: maybe ideally we do `indexable: { uh: oneOf[IndexTooNegative] }` and then
    #       `array: { uh: extend(indexable uh)[ ArrayUh1, ArrayUh2 ] }`.
    #       but the following notation is pretty clear (no extra `extend` keyword necessary)
    # TODO: ideally there is an easy way to say that a `oneOf` extends another `oneOf`,
    #       even if the number offsets would be different.
    ...\/allocation uh
    ...\/indexable uh
]
hm[ok]: hm[ok, uh]

array[of]: indexable {
    @private
    Allocation; allocation

    ;;reset(Arguments[of].):
        Allocation count(Arguments count()) orPanic()
        while My Count < Arguments count()
            Allocation moveConstruct(InBounds: Arguments[My Count++]!)

    # TODO: convert this into a deque, add `Start: count`
    #       however, this will make resizing more complicated.

    @private
    Count; count = 0

    ::count(): My Count

    ;;count(New Count): hm[count]
        Old Count: My Count
        if New Count == Old Count
            return ok(Old Count)
        if New Count > Old Count
            I allocate(AtLeast: Count) assert()
            while My Count < New Count
                Allocation defaultConstruct(InBounds: My Count++)
        else
            assert(New Count >= 0, uh InvalidCount)
            while My Count > New Count
                Allocation deconstruct(InBounds: --My Count)
        ok(Old Count)

    ;;append(Of): hm[null]
        debug assert(My Count < count::Max)
        I allocate(AtLeast: My Count + 1) assert()
        Allocation copyConstruct(My Count++, Of)

    ;;append(Of.): hm[null]
        debug assert(My Count < count::Max)
        I allocate(AtLeast: My Count + 1) assert()
        Allocation moveConstruct(My Count++, Of!)

    ;:[Index.]?: of
        # don't resize the array if we're asking for a nullable element type:
        what My inBounds(Index)
            Ok: $(I[Ok])
            Uh: $(Null)

    # getter (makes a copy)
    ;:[Index.]: hm[of]
        # allow array resizing if asking for non-null, if the array is mutable.
        # (i.e., `My inBounds(Index)` is the same as `;:inBounds(Index)`
        # due to the method template signature.)
        InBounds: My inBounds(@hide Index) assert()
        My[InBounds]
   
    # in-bounds getter (makes a copy), which is unsafe to call unless `InBounds` is 
    # within the range `[0, My count())`.
    ::[InBounds.]: of
        debug assert(InBounds >= 0 and InBounds < My count())
        Allocation[InBoundsAndConstructed: InBounds]

    # no-copy getter/setter; it can resize this array (if writeable) to pass in
    # a value to the passed-in function.
    ;:[Index., fn(Of;:): ~t]: hm[t]
        InBounds: My inBounds(@hide Index) assert()
        My[InBounds, fn]

    # no-copy getter/setter which is unsafe to call unless
    # `InBounds` is within the range `[0, My count())`.
    ;:[InBounds, fn(Of;:): ~t]: t
        debug assert(InBounds >= 0 and InBounds < My count())
        Allocation[InBoundsAndConstructed: InBounds, fn]
   
    # no-copy getter, which passes a Null into the callback if 
    # the index is out of bounds in the array:
    ::[Index., fn(Of?): ~t]: hm[t]
        I ensureNonNegative(Index;) assert()
        if Index >= My Count
            ok(fn(Null))
        else
            ok(Allocation[InBoundsAndConstructed: Index, fn])

    # returns a value of the array element at the specified index,
    # or the end of the array if not specified.  returns null if the element
    # would be out of bounds (e.g., `Index >= My count()` or no elements present).
    ;;pop(Index = -1)?: of
        # don't resize the array in case `Index >= My Count`.
        what My inBounds(Index)
            Ok: $(I pop(Ok))
            Uh: $(Null)
        # alternatively, `::inBounds(Index) map((Ok): I pop(Ok), (Uh): Null)`

    ;;pop(InBounds): of
        debug assert(InBounds >= 0 and InBounds < My count())
        Result: I[InBounds]!
        I erase(InBounds)
        Result

    ;;erase(Index.): null
        My inBounds(Index) is((Ok):
            I erase(Ok)
        )

    ;;erase(InBounds): null
        debug assert(InBounds >= 0 and InBounds < My count())
        for DestinationIndex: InBounds, DestinationIndex < My count() - 1
            My[DestinationIndex] = My[InBounds: DestinationIndex + 1]!
        My count(My count() - 1)

    !!(Me): bool
        count(Me) > 0

    # moves the value at Index into the return value if Index is within the size of the array,
    # resetting the array element to a default `of()` if so.
    # otherwise, returns Null if Index was too big and doesn't reset any array elements.
    ;;[Index.]!?: of
        InBounds: My inBounds(@hide Index)
        if InBounds < 0 or InBounds >= My count()
            return Null
        My[InBounds]!

    # moots the value at the passed-in index; the index should be bounds-checked;
    # prefer `;;[Index.]!?: of` if you don't know if the index is in bounds.
    # returns the value at Index, resetting the array element's value to a default value.
    ;;[InBounds]!: of
        debug assert(Index >= 0 and Index < My count())
        Of; of
        I swap(InBounds, Of;)
        return Of!

    # swapper, sets the value at the index, returning the old value in the reference.
    # if the swapped in value is Null but the array value wasn't Null, the array
    # will shrink by one, and all later indexed values will move down one index.
    # TODO: we probably don't want the "shrink by one" functionality.  either
    #       delete this API or make it more consistent since arrays can have nulls.
    ;;swap(Index;, Of?;): null
        I ensureNonNegative(Index;)
        if Of == Null
            Of = I pop(Index)
        else
            New Of?: My[Index]!
            My[Index] = Of!
            Of = New Of!

    ;;[Index;, Of?;]: swap(Index;, Of;)

    # returns a copy of this array, but sorted:
    ::sort(): this

    # sorts this array in place:
    ;;sort(): null

    @private
    ::inBounds(Index.): hm[inBounds]
        I ensureNonNegative(Index;) assert()
        assert(Index < count(), Uh: InvalidIndex)
        ok(inBounds(Index))

    @private
    ;;inBounds(Index.): hm[inBounds]
        I ensureNonNegative(Index;) assert()
        if Index >= count()
            count(Index + 1) assert()
        ok(inBounds(Index))

    @private
    ;;allocate(AtLeast: count): hm[null]
        debug assert(AtLeast >= 0)
        if AtLeast <= My Allocation Count
            return ok()

        # we should at least try to double the storage
        TryToAllocate; I roughlyDoubleAllocation()
        while TryToAllocate > AtLeast
            if My Allocation count(TryToAllocate) isOk()
                return ok()
            # in case we can't allocate that much, we can back down.
            TryToAllocate = (TryToAllocate + AtLeast) // 2

        My Allocation count(AtLeast)

    @private
    ::roughlyDoubleAllocation(): count
        if My Allocation Count == 0
            return 4
        Doubled: 2 * My Allocation Count
        if Doubled >= 0
            return Doubled
        # if we're at this point, we're in insane territory
        # TODO
}
