uh: \/allocation uh
hm[ok]: hm[ok, uh]

array[of]: indexable {
    @private
    Allocation; allocation

    # TODO: convert this into a deque, add `Start: count`
    #       however, this will make resizing more complicated.

    @private
    Count; count = 0

    ::count(): This Count
    # TODO: should we have a `tryCount` or `countHm`, or just rely on 
    #       different return types?  or do we always want users to use the safe API
    # TODO: the other thing, should we require `Old Count` as the return type here?
    #       otherwise we could return a boolean if it worked.
    #       i don't think we want to go back to SFO specification because
    #       `int: {Int: int}` is a bit confusing for return types.
    #       could we do `;;count(New Count): Old Count: count`?
    #       `;;count(New Count): {Old Count}` would be nice, however, if we kept SFO.
    ;;count(New Count): hm[count]
        Old Count: This Count
        if New Count == Old Count
            return ok(Old Count)
        if New Count > Old Count
            This allocate(AtLeast: Count) assert()
            while This Count < New Count
                Allocation defaultConstruct(InBounds: This Count++)
        else
            assert(New Count >= 0, uh InvalidCount)
            while This Count > New Count
                Allocation deconstruct(InBounds: --This Count)
        ok(Old Count)

    ;;append(Of): hm~null
        debug assert(This Count < count::Max)
        This allocate(AtLeast: This Count + 1) assert()
        Allocation copyConstruct(This Count++, Of)

    ;;append(Of.): hm[null]
        debug assert(This Count < count::Max)
        This allocate(AtLeast: This Count + 1) assert()
        Allocation moveConstruct(This Count++, Of!)

    ;:[Index.]?: of
        # don't resize the array if we're asking for a nullable element type:
        what This::inBounds(Index)
            Ok: $(This[Ok])
            Uh: $(Null)

    # getter (makes a copy)
    ;:[Index.]: hm[of]
        # allow array resizing if asking for non-null, if the array is mutable.
        # (i.e., `This inBounds(Index)` is the same as `This;:inBounds(Index)`
        # due to the method template signature.)
        InBounds: This inBounds(@hide Index) assert()
        This[InBounds]
   
    # in-bounds getter (makes a copy), which is unsafe to call unless `InBounds` is 
    # within the range `[0, This count())`.
    ::[InBounds.]: of
        debug assert(InBounds >= 0 and InBounds < This count())
        Allocation[InBoundsAndConstructed: InBounds]

    # no-copy getter/setter; it can resize this array (if writeable) to pass in
    # a value to the passed-in function.
    ;:[Index., fn(Of;:): ~u]: hm[u]
        InBounds: This inBounds(@hide Index) assert()
        This[InBounds, fn]

    # no-copy getter/setter which is unsafe to call unless
    # `InBounds` is within the range `[0, This count())`.
    ;:[InBounds, fn(Of;:): ~u]: u
        debug assert(InBounds >= 0 and InBounds < This count())
        Allocation[InBoundsAndConstructed: InBounds, fn]
   
    # no-copy getter, which passes a Null into the callback if 
    # the index is out of bounds in the array:
    ::[Index., fn(Of?): u]: hm[u]
        This ensurePositive(Index;) assert()
        if Index >= This Count
            ok(fn(Null))
        else
            ok(Allocation[InBoundsAndConstructed: Index, fn])

    # returns a value of the array element at the specified index,
    # or the end of the array if not specified.  returns null if the element
    # would be out of bounds (e.g., `Index >= This count()` or no elements present).
    ;;pop(Index = -1)?: of
        # don't resize the array in case `Index >= This Count`.
        what This::inBounds(Index)
            Ok: $(This pop(Ok))
            Uh: $(Null)
        # alternatively, `This::inBounds(Index) map((Ok): This pop(Ok), (Uh): Null)`

    ;;pop(InBounds): of
        debug assert(InBounds >= 0 and InBounds < This count())
        Result: This[InBounds]!
        This erase(InBounds)
        Result

    ;;erase(Index.): null
        This inBounds(Index) is((Ok):
            This erase(Ok)
        )

    ;;erase(InBounds): null
        debug assert(InBounds >= 0 and InBounds < This count())
        for DestinationIndex: InBounds, DestinationIndex < This count() - 1
            This[DestinationIndex] = This[InBounds: DestinationIndex + 1]!
        This count(This count() - 1)

    !!(This): bool
        return This count() > 0

    # moves the value at Index into the return value if Index is within the size of the array,
    # resetting the array element to a default `of()` if so.
    # otherwise, returns Null if Index was too big and doesn't reset any array elements.
    ;;[Index.]!?: of
        InBounds: This ensurePositive(@hide Index)
        if InBounds < 0 or InBounds >= This count()
            return Null
        This[InBounds]!

    # moots the value at the passed-in index; the index should be bounds-checked;
    # prefer `;;[Index.]!?: of` if you don't know if the index is in bounds.
    # returns the value at Index, resetting the array element's value to a default value.
    ;;[InBounds]!: of
        debug assert(Index >= 0 and Index < This count())
        Of; of
        This swap(InBounds, Of;)
        return Of!

    # swapper, sets the value at the index, returning the old value in the reference.
    # if the swapped in value is Null but the array value wasn't Null, the array
    # will shrink by one, and all later indexed values will move down one index.
    ;;swap(Index;, Of?;): null
        This ensurePositive(Index;)
        if Of == Null
            Of = This pop(Index)
        else
            New Of?: This[Index]!
            This[Index] = Of!
            Of = New Of!

    ;;[Index;, Of?;]: swap(Index;, Of;)

    # returns a copy of this array, but sorted:
    ::sort(): this

    # sorts this array in place:
    ;;sort(): null

    @private
    ::ensurePositive(Index;): hm[null]
        if Index < 0
            Index += This Count
            if Index < 0
                Index -= This Count # reset Index to avoid leaking state
                debug error("Index was too negative: $(Index)")
                return uh InvalidIndex
        ok()

    @private
    ::inBounds(Index.): hm[inBounds]
        This ensurePositive(Index;) assert()
        assert(Index < count(), Uh: InvalidIndex)
        ok(inBounds(Index))

    @private
    ;;inBounds(Index.): hm[inBounds]
        This ensurePositive(Index;) assert()
        if Index >= count()
            count(Index + 1) assert()
        ok(inBounds(Index))

    @private
    ;;allocate(AtLeast: count): hm[null]
        debug assert(AtLeast >= 0)
        if AtLeast <= This Allocation Count
            return ok()

        # we should at least try to double the storage
        TryToAllocate; This roughlyDoubleAllocation()
        while TryToAllocate > AtLeast
            if Allocation count(TryToAllocate) isOk()
                return ok()
            # in case we can't allocate that much, we can back down.
            TryToAllocate = (TryToAllocate + AtLeast) // 2

        Allocation count(AtLeast)

    @private
    ::roughlyDoubleAllocation(): count
        if This Allocation Count == 0
            return 4
        Doubled: 2 * This Allocation Count
        if Doubled >= 0
            return Doubled
        # if we're at this point, we're in insane territory
}
