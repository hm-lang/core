
class NEW_T ARRAY
    NEW_T GRSV MD this(INDEX) = NEW(
        NEW_T FN new.get()
            return get(index)
        NEW_T FN new.remove()
            return remove(index)
        NEW_T FN new.set(NEW_T value)
            return set(index, value)
        CONST_NEW_T REF FN new.view()
            return view(index)
    )

    class NEW_T VALUE_ITERATOR(
        NEW_T ARRAY CONST_REF array__
    ) extends NEW_T REMOVABLE_ITERATOR(array.size)
        INDEX __ = 0
        NEW_T? MD next()
            return index < array.size ? array.get(index++) : null

        CONST_NEW_T REF? MD peak()
            return index < array.size ? array.view(index) : null

        MD insert(NEW_T)
            if index < array.size
                array.insert(index++, newT)
            else
                array.append(newT)
                index = array.size

        NEW_T? MD remove()
            return index < array.size ? array.remove(index) : null

    class NEW_T INDEX_ITERATOR(
        NEW_T ARRAY CONST_REF array__
    ) extends [INDEX, NEW_T] ITERATOR(array.size)
        INDEX new.index__ = 0
        [INDEX, NEW_T]? MD next()
            if new.index >= array.size
                return null
            index = new.index++
            newT = array.get(index)

    to NEW_T VALUE_ITERATOR = VALUE_ITERATOR(this)
    # TODO: make these automatic based on VALUE_ITERATOR's hierarchy:
    to NEW_T REMOVABLE_ITERATOR = VALUE_ITERATOR(this)
    to NEW_T ITERATOR = VALUE_ITERATOR(this)

    to [INDEX, NEW_T] INDEX_ITERATOR = INDEX_ITERATOR(this)
    # TODO: make this automatic based on INDEX_ITERATOR's hierarchy:
    to [INDEX, NEW_T] ITERATOR = INDEX_ITERATOR(this)

