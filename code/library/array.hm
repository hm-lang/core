class NewT Array extends NewT IndexedContainer
    class NewT ArrayRefable__(Index, NewT Array constRef ArrayRef__) extends NewT gate.Refable
        NewT Ref ref()
            return ArrayRef.ref(Index)
        NewT swap(newT New)
            return ArrayRef.swap(Index, New)
        NewT View ConstThis.view()
            return ArrayRef.view(Index)

    NewT gate.Refable This[Index] = arrayRefable(Index, ArrayRef(This))

    class NewT ValueIterator_(
        NewT Array constRef ArrayRef__
    ) extends NewT iterator.InsertablePeakableRemovable(ArrayRef.size())
        Index __ = 0

        NewT? next()
            return ArrayRef.get(Index++) if Index < ArrayRef.size() else Null

        insert(NewT)
            if Index < ArrayRef.size()
                ArrayRef.insert(Index++, NewT)
            else
                ArrayRef.append(NewT)
                Index = ArrayRef.size()

        NewT View? ConstThis.peak()
            return ArrayRef.view(Index) if Index < ArrayRef.size() else Null

        NewT? remove()
            return ArrayRef.remove(Index) if Index < ArrayRef.size() else Null

    class NewT ConstValueIterator_(
        NewT Array constView ArrayView__
    ) extends NewT View iterator.Peakable(ArrayView.size())
        Index __ = 0

        NewT View? next()
            return ArrayView.view(Index++) if Index < ArrayView.size() else Null

        # TODO: ensure that View View? can collapse to View?
        NewT View? ConstThis.peak()
            return ArrayView.view(Index) if Index < ArrayView.size() else Null

    class NewT IndexIterator_(
        NewT Array constRef ArrayRef__
    ) extends [Index, NewT] Iterator(ArrayRef.size())
        index NextIndex__ = 0

        [Index, NewT]? next()
            if NextIndex >= ArrayRef.size()
                return Null
            Index = NextIndex++
            NewT = ArrayRef.get(Index)

    # TODO: define indexIterator without peak, but on const view of the array and on ref of NewT

    # TODO: make these automatic based on valueIterator's hierarchy:
    to NewT iterator.InsertablePeakableRemovable = valueIterator(ArrayRef(This))
    to NewT iterator.PeakableRemovable = valueIterator(ArrayRef(This))
    to NewT iterator.Peakable = valueIterator(ArrayRef(This))
    to NewT iterator.Removable = valueIterator(ArrayRef(This))
    to NewT Iterator = valueIterator(ArrayRef(This))

    to [Index, NewT] Iterator = indexIterator(ArrayRef(This))

