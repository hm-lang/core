class NEW_T ARRAY
    class GRSV(INDEX, NEW_T ARRAY CONST_REF) extends NEW_T :GRSV
        NEW_T MD get()
            return newT_array_constRef.get(index)
        NEW_T MD remove()
            return newT_array_constRef.remove(index)
        NEW_T MD set(NEW_T value)
            return newT_array_constRef.set(index, value)
        CONST_NEW_T REF MD view()
            return newT_array_constRef.view(index)

    NEW_T GRSV MD this(INDEX) = NEW(index, this)

    class VALUE_ITERATOR(
        NEW_T ARRAY CONST_REF
    ) extends NEW_T REMOVABLE_ITERATOR(newT_array_constRef.size)
        INDEX __ = 0

        NEW_T? MD next()
            return index < newT_array_constRef.size ? newT_array_constRef.get(index++) : null

        CONST_NEW_T REF? MD peak()
            return index < newT_array_constRef.size ? newT_array_constRef.view(index) : null

        MD insert(NEW_T)
            if index < newT_array_constRef.size
                newT_array_constRef.insert(index++, newT)
            else
                newT_array_constRef.append(newT)
                index = newT_array_constRef.size

        NEW_T? MD remove()
            return index < newT_array_constRef.size ? newT_array_constRef.remove(index) : null

    class NEW_T INDEX_ITERATOR(
        NEW_T ARRAY CONST_REF
    ) extends [INDEX, NEW_T] ITERATOR(newT_array_constRef.size)
        INDEX nextIndex__ = 0

        [INDEX, NEW_T]? MD next()
            if nextIndex >= newT_array_constRef.size
                return null
            index = nextIndex++
            newT = newT_array_constRef.get(index)

    to NEW_T VALUE_ITERATOR = VALUE_ITERATOR(this)
    # TODO: make these automatic based on VALUE_ITERATOR's hierarchy:
    to NEW_T REMOVABLE_ITERATOR = VALUE_ITERATOR(this)
    to NEW_T ITERATOR = VALUE_ITERATOR(this)

    to [INDEX, NEW_T] INDEX_ITERATOR = INDEX_ITERATOR(this)
    # TODO: make this automatic based on INDEX_ITERATOR's hierarchy:
    to [INDEX, NEW_T] ITERATOR = INDEX_ITERATOR(this)

