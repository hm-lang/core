===
A wrapper for a value which can be viewable, swappable, and/or refable.
While the interface definitions are mutually exclusive and can be combined
in any way, in this wrapper we assume a strict hierarchy:

    (1) `Gate` = `@interfaces.gettable`
    (2) `gate.Settable` = (1) + `@interfaces.settable`
    (3) `gate.Viewable` = (2) + `@interfaces.viewable`
    (4) `gate.Swappable` = (3) + `@interfaces.swappable`
    (5) `gate.Refable` = (4) + `@interfaces.refable`

A `Gate` corresponds to a getter in other languages: the underlying wrapped
value can be copied using `get()` into a new value but not mutated.

A `gate.Settable` corresponds to a setter in other languages, but it
requires defining the getter as well.  Any logic can be used to modify
the passed-in value via `set()`, though generally a subsequent call to `get()`
should return something reasonable based on what was set.

A `gate.Viewable` allows no-copy access to the underlying value, but
the caller is not able to mutate the value using the `view()` method.

A `gate.Swappable` allows setting a value and getting the previous value
passed back out (i.e., since it is a swap).

A `gate.Refable` corresponds to a wrapped value which can be modified
in any way, with/without copies, since a direct reference can be provided for it.
===
class NewT Gate extends NewT @interfaces.Gettable;

class NewT gate.Settable extends NewT Gate, NewT @interfaces.Settable;

class NewT gate.Viewable extends NewT gate.Settable, NewT @interfaces.Viewable;

class NewT gate.Swappable extends NewT gate.Viewable, NewT @interfaces.Swappable;

class NewT gate.Refable extends NewT gate.Swappable, NewT @interfaces.Refable;
    ===
    We can put in sensible defaults for `set`, `get`, `view`, and `swap`.

    Your application can optimize, but note that there shouldn't be any special
    setter logic in swap, since these operations should be guaranteed to be the same:

        Int gate.refable MyRefable( #/...special logic.../# )
        # option 1:
        MyRefable.ref() = 1234
        # option 2:
        MyRefable.swap(1234)
        # option 3:
        MyRefable.set(1234)
        # with options 1 - 3, we should still get this to be true:
        MyRefable.view() == 1234
    ===
    NewT get()
        return ref()

    ===
    See `get` method for some important details.
    ===
    NewT View view()
        return ref()

    ===
    See `get` method for some important details.
    ===
    set(newT New)
        swap(New)

    ===
    See `get` method for some important details.
    ===
    NewT swap(newT New)
        # a `ref` type can swap:
        return ref().swap(New)

    ===
    See `get` method for some important details.
    ===
    NewT View ConstThis.view()
        # a `ref` type can be converted to a `view` type:
        return ref()

# TODO: add gate.Removable extends gate.Refable, NewT @interfaces.Removable
