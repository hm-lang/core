# TODO: maybe make size getters/setters interfaces (Sizable and Resizable)
class NewT Iterator(size? const Size) extends NewT Nextable
    ===
    Returns the next value of the iterator, or null
    if the iterator is finished:
    ===
    NewT? next();

    ===
    Maps the values in the current `iterator` into elements of a possibly
    different type in a new iterator.  The callback provides the mapping
    from this iterator's values to the returned one's values.
    TODO: possibly make a mappedLambda iterator class to avoid creating a lambda?
    TODO: closure concerns: either way, how do we know iterator/container will remain backed?
    ===
    NewU Iterator map(NewU fn(NewT)) = new(
        Size
        NewU? New.next()
            newT? Current = next()
            if Current != Null
                return fn(Current)
    )

    ===
    Combines map and filter functionality to produce a new iterator
    from the current `iterator`.  The provided callback should return
    Null if that value should not be returned in the new iterator,
    and otherwise returns the new value converted from the old one.
    ===
    NewU Iterator map(NewU? fn(NewT)) = new(
        # TODO: support other things besides `next()`, e.g. peak():
        NewU? New.next()
            newT? Current
            while True
                Current = next()
                if current == Null
                    return
                # TODO: maybe allow access to NewU? variable using NewU? and NewUQ
                NewUQ = fn(Current)
                if NewUQ != null
                    return
    )

    # TODO: make lambda-class implementations of abstract classes automatic.
    NewT Iterator new(NewT? New.next(), size? const New.Size) = iterator.lambda(
        New.Size
        New.next
    )

    ===
    Takes elements from an `iterator` and puts them into a new one,
    based on some filtering criterion.
    ```
    Int array X = [1, 2, 3, 100, 9, 11]
    Int array Y = iterator.take(From(X), $WhereValue < 10)
    # Y == [1, 2, 3, 9]
    # X == [100, 11]
    ```
    ===
    NewT Iterator take(NewT iterator.PeakableRemovable ref From, Bool fn(NewT view WhereValue)) = new(
        NewT? New.next()
            NewT view? Peaked
            while True
                Peaked = From.peak()
                if Peaked == Null
                    return
                if fn(WhereValue(Peaked))
                    return From.remove()
                From.next()
    )

===
A version of the `iterator` class whose `next()` is defined via a lambda
function rather than implemented as a child-class method.
TODO: make lambda-class implementations of abstract classes automatic.
===
class NewT iterator.Lambda_(
    ===
    function which gets the next value of the iterator, or null
    if the iterator is finished:
    ===
    NewT? New.next__()

    ===
    value which provides the total number of elements which will
    be iterated over, if available.  if there is a backing container,
    this is the original number of elements in the container.
    ===
    size? const New.Size
) extends NewT Iterator(New.Size)
    NewT? next() = New.next()


===
An abstract class for an iterator which defines a `peak()` method, which allows
users to see the next value in the iteration without changing the iterator.
===
class NewT iterator.Peakable(size? const Size)
        extends NewT @interfaces.Peakable, NewT Iterator(Size);

class NewT iterator.Buffered extends NewT iterator.Peakable
    NewT? NextValue__

    from(NewT iterator This.Wrapped__)
        # TODO: find a better syntax for parent from'ing:
        iterator.Peakable.from(This.Wrapped.Size)
        NextValue = This.Wrapped.next()

    NewT view? peak()
        return NextValue

    NewT? next()
        if NextValue != null
            # TODO: nim-style a = b = c style moves.
            NewTQ = NextValue = Wrapped.next()

===
An abstract class for an iterator which defines a `remove()` method, which allow users
to remove the next value in the iteration, which changes the iterator and underlying
container.
===
class NewT iterator.Removable extends NewT @interfaces.Removable, NewT Iterator;

===
An abstract class for an iterator which defines `peak()` and `remove()` methods,
which allow users to see the next value in the iteration without changing the iterator,
as well as remove the next value in the iteration (which does change the iterator and
the underlying container).
===
# TODO: better way to annotate interfaces.  e.g. extends NEW_T ITERATOR & PEAKABLE & REMOVABLE
# TODO: make sure that this "inherits" from iterator.removable even if not explicit.
class NewT iterator.PeakableRemovable implements
        NewT @interfaces.Peakable,
        NewT @interfaces.Removable,
        NewT Iterator
